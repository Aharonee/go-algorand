// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BqIAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
