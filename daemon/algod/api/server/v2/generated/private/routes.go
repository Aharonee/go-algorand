// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
