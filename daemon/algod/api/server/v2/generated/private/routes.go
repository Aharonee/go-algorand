// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
