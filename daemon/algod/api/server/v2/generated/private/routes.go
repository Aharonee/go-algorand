// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+Knems/1tey26OrT1f8NAAD//+eZ6ZQavAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
