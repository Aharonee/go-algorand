// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by id
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info by id
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/3PbtvLgv4LRezP5cqLkJE5f45nOOzdJW1/TNBO7vbsX51qIXEmoSYAFQEtqzv/7",
	"Z7AASJAEJfnLcz+Z158Si8Bisdhd7C4Wi0+jVBSl4MC1Gh19GpVU0gI0SPyLpqmouE5YZv7KQKWSlZoJ",
	"Pjry34jSkvHFaDxi5teS6uVoPOK0gKaN6T8eSfi9YhKy0ZGWFYxHKl1CQQ1gvSlN6xrSOlmIxIE4tiBO",
	"Xo2utnygWSZBqT6WP/J8QxhP8yoDoiXliqbmkyIrppdEL5kirjNhnAgORMyJXrYakzmDPFMTP8nfK5Cb",
	"YJZu8OEpXTUoJlLk0MfzpShmjIPHCmqk6gUhWpAM5thoSTUxIxhcfUMtiAIq0yWZC7kDVYtEiC/wqhgd",
	"fRgp4BlIXK0U2CX+dy4B/oBEU7kAPfo4jk1urkEmmhWRqZ046ktQVa4VwbY4xwW7BE5Mrwn5oVKazIBQ",
	"Tt5/85I8e/bshZlIQbWGzDHZ4Kya0cM52e6jo1FGNfjPfV6j+UJIyrOkbv/+m5c4/qmb4L6tqFIQF5Zj",
	"84WcvBqagO8YYSHGNSxwHVrcb3pEhKL5eQZzIWHPNbGN73RRwvH/1FVJqU6XpWBcR9aF4FdiP0d1WNB9",
	"mw6rEWi1Lw2lpAH64SB58fHTk/GTg6u/fThO/uX+fP7sas/pv6zh7qBAtGFaSQk83SQLCRSlZUl5nx7v",
	"HT+opajyjCzpJS4+LVDVu77E9LWq85LmleETlkpxnC+EItSxUQZzWuWa+IFJxXOjpgw0x+2EKVJKccky",
	"yMZG+66WLF2SlCoLAtuRFctzw4OVgmyI1+Kz2yJMVyFJDF43ogdO6L8vMZp57aAErFEbJGkuFCRa7Nie",
	"/I5DeUbCDaXZq9T1NitytgSCg5sPdrNF2nHD03m+IRrXNSNUEUr81jQmbE42oiIrXJycXWB/NxtDtYIY",
	"ouHitPZRI7xD5OsRI0K8mRA5UI7E83LXJxmfs0UlQZHVEvTS7XkSVCm4AiJmv0GqzbL/r9Mf3xIhyQ+g",
	"FF3AO5peEOCpyIbX2A0a28F/U8IseKEWJU0v4tt1zgoWQfkHumZFVRBeFTOQZr38/qAFkaAryYcQshB3",
	"8FlB1/1Bz2TFU1zcZtiWoWZYiakyp5sJOZmTgq6/Ohg7dBSheU5K4BnjC6LXfNBIM2PvRi+RouLZHjaM",
	"NgsW7JqqhJTNGWSkhrIFEzfMLnwYvx4+jWUVoOOBDKJTj7IDHQ7rCM8Y0TVfSEkXELDMhPzkNBd+1eIC",
	"eK3gyGyDn0oJl0xUqu40gCMOvd285kJDUkqYswiPnTpyGO1h2zj1WjgDJxVcU8YhM5oXkRYarCYaxCkY",
	"cLsz09+iZ1TBF4dDG3jzdc/Vn4vuqm9d8b1WGxslViQj+6L56gQ2bja1+u/h/IVjK7ZI7M+9hWSLM7OV",
	"zFmO28xvZv08GSqFSqBFCL/xKLbgVFcSjs75Y/MXScippjyjMjO/FPanH6pcs1O2MD/l9qc3YsHSU7YY",
	"IGaNa9Sbwm6F/cfAi6tjvY46DW+EuKjKcEJpyyudbcjJq6FFtjCvy5jHtSsbehVna+9pXLeHXtcLOYDk",
	"IO1KahpewEaCwZamc/xnPUd+onP5h/mnLPMYTQ0Du40WgwIuWPDe/WZ+MiIP1icwUFhKDVGnuH0efQoQ",
	"+ruE+eho9LdpEymZ2q9q6uCaEa/Go+MGzt2P1PS08+s4Ms1nwrhdHWw6tj7h3eNjoEYxQUO1g8PXuUgv",
	"boRDKUUJUjO7jjMDpy8pCJ4sgWYgSUY1nTROlbWzBvgdO36H/dBLAhnZ4n7E/9CcmM9GCqn25psxXZky",
	"RpwIAk2ZsfjsPmJHMg3QEhWksEYeMcbZtbB82QxuFXStUT84snzsQouszmtrVxLs4Sdhpt54jcczIW/G",
	"Lx1G4KTxhQk1UGvr18y8vbLYtCoTR5+IPW0bdAA14ce+Wg0p1AUfo1WLCqea/huooAzUu6BCG9BdU0EU",
	"JcvhDuR1SdWyPwlj4Dx7Sk6/O37+5OkvT59/YXboUoqFpAWZbTQo8tDtK0TpTQ6P+jNDBV/lOg79i0Pv",
	"QbXh7qQQIlzD3keizsBoBksxYuMFBrtXkIOGd1RqlrISqXWShRRtQ2k1JBewIQuhSYZAMrvTI1S5kRW/",
	"g4UBKYWMWNLIkFqkIk8uQSomIkGRd64FcS2MdrPWfOd3iy1ZUUXM2OjkVTwDOYmtp/He0FDQUKhd248F",
	"fbbmDcUdQCol3fTW1c43Mjs37j4r3Sa+9xkUKUEmes1JBrNqEe58ZC5FQSjJsCOq2bcig1NNdaXuQLc0",
	"wBpkzEKEKNCZqDShhIvMqAnTOK51BiKkGJrBiJIOFZle2l1tBsbmTmm1WGpijFURW9qmY0JTuygJ7kBq",
	"wKGsIwG2lR3ORt9yCTTbkBkAJ2LmvDbnT+IkKQZ7tD/HcTqvQav2NFp4lVKkoBRkiTu02omab2dXWW+h",
	"EyKOCNejECXInMobIquFpvkORLFNDN3aSHGubh/r/YbftoDdwcNlpNJ4rpYLjEVkpNuouSES7kmTS5Do",
	"8v1b188PctPlq8qBAxm3r5+xwogv4ZQLBangmYoCy6nSyS6xNY1axoeZQSApMUlFwANhhzdUaev4M56h",
	"IWrVDY6DfXCIYYQHdxQD+We/mfRhp0ZPclWpemdRVVkKqSGLzYHDestYb2FdjyXmAex6+9KCVAp2QR6i",
	"UgDfEcvOxBKIahd5qiNj/clhkN/sA5soKVtINITYhsipbxVQNwxKDyBivJa6JzIOUx3OqSPh45HSoiyN",
	"/Omk4nW/ITKd2tbH+qembZ+5qG70eibAjK49Tg7zlaWsPY5YUmMxImRS0AuzN6H9ZyMUfZyNMCaK8RSS",
	"bZxvxPLUtApFYIeQDpje7sAzGK0jHB3+jTLdIBPsWIWhCQ/4AS2j9HvY3IHdWXZA9mn9CjRlOWQk+BnV",
	"NSm7NvJOa7432j5m3jHJ9kSBZaMIlW5m2e1l9XaHipi9kenkTOEO1aOfQvTt4clZcORyB6ZpBKpRJ5QT",
	"RNSHZI0FEDaBNU11vjH7ql7ChqxAAlHVrGBa29OwNjtpUSYhgKj/vWVEFwGxBw9+BfYJyZwiqGB6/aUY",
	"j6ydtB2/s46l1CKHs9BKIfLJbhXTI0YUg/1EoBRm1Zk7fPUndJ6TWkg6qwnDX7W2fqBaZMYZkP8rKpJS",
	"jhZfpaHegoREvY77vRnB7Jj1mMyaVg2FIIcCrCGLXx4/7k788WO35kyROax8xoJp2CXH48folr0TSreE",
	"645U3UlkM8HAhNmZnNHY1SmTvdTaSbbXSrbjCiev/KAoU0o5xjXTv7UC6Ejmep+5hzyypGq5e+4Id6+4",
	"TAA6Nm+77lKI+R3MlmXr2DFdBuvYTB3jolP0wHgQGwV6EjX2SoNg5KQe5EWOERcx7wgkKcBIilqy0oBs",
	"ThU3GloZSf/v4T+PPhwn/6LJHwfJi/8x/fjp8OrR496PT6+++ur/t396dvXVo3/+PWYgK81m8Zjfd1Qt",
	"DaZOca75CbdR+7mQ1q3aOGtNzO8b7w6LmcX0lA+mtJe4xRaEcULtYiPPGWM839zBHmsBEQmlBIUaMXRi",
	"lf0q5mFCkuM8tVEain4cyHb9ZcAKfu9tyB6XCp4zDkkheMyi+xG//oAfY72tVh7ojPvjUN+ujd3Cv4NW",
	"e5x9FvO29MXVDtTQuzo96g4Wvwu3EwIMU7EwhAF5SShJc4YBDsGVllWqzzlFFypg18ihhHcMh53ql75J",
	"3IuPONkO1DmnytCwdqyioeE5REIm3wB431pViwUo3bHt5gDn3LVinFScaRyrMOuV2AUrQeLJwMS2LOiG",
	"zGmOMYA/QAoyq3Tb2sGMEaWNi27jkWYYIubnnGqSA1Wa/MD42RrB+cQMzzMc9ErIi5oKcZ2/AA6KqSSu",
	"SL+1X1GfuukvnW7F9F372eub+94APO6xfAaH+ckr5wmcvEJzr4lE9nC/t/BUwXgSZbKzJZCCcUyL6/AW",
	"eWiMVs9Aj5qYplv1c67X3DDSJc1ZRvXN2KGr4nqyaKWjwzWthehEG/xcP8YOnxciKWl6gWePowXTy2o2",
	"SUUx9R7QdCFqb2iaUSgEx2/ZlJZsqkpIp5dPdphjt9BXJKKursYjp3XUnWc5OMCxCXXHrON8/m8tyINv",
	"X5+RqVsp9cAmN1nQQVZKxGl1d2taBzlm8jY532Z3nfNz/grmjDPz/eicZ1TT6YwqlqpppUB+TXPKU5gs",
	"BDkiDuQrquk576n4wfszmHrssCmrWc7SeOBlPLI50X0I5+cfDIOcn3/snQr0N043VFRG7QDJiumlqHTi",
	"kj4TCSsqswjqqk76Q8g2ZXvbqGPiYFuOdEmlDn5cVdOyVEkuUponSlMN8emXZW6mH7ChItgJc1WI0kJ6",
	"JWg0o8UG1/etcOcikq58xnClQJFfC1p+YFx/JMl5dXDwDMhxWb4xME8NHr86XWN4clNCK7yxZ5ZRAywW",
	"2sCJW4MK1lrSpKQLUNHpa6Alrj5u1AUG0vKcYLeQJvVJPYJqJuDpMbwAFo9r51Hh5E5tL397Jz4F/IRL",
	"iG2MdmoC4jddLwPqO5EbJrvxcgUwoqtU6WViZDs6K2VY3K9MndS/MDrZn1IotuBGCNz9hxmQdAnpBWSY",
	"ig1FqTfjVnd/EOZ2OK86mLJXFmy6FObVYiRoBqQqM+psAMo33QRHBVr7rM73cAGbM9Gk5V4no/FqPErt",
	"JYLE8MyQoCKnBpuRYdZQbB2M7uK7Q1WDKS1LssjFzEl3zRZHNV/4PsOCbHfIOxDiGFPUZNjC7yWVEUJY",
	"5h8gwQ0mauDdivVj02uF0/bM32xFyRDIrs0lup2IeXfX6Cn1qBKzjZMZVfENBMwXsx5Ghrpnzn4kG1TF",
	"GUwIXnt1jDvL0Rapj7utZFPZijzae3xDqMW5BCRvdnWPRpsiofmwpMpf3cEbTl5g9tpohw7m6oNVw0X+",
	"ZBX9vcZyYmbcHC7pEP2H881PguPS4BpTnU3uFVtXGMb1zQJ7o9hnnftUc59fPhpfK1d8PHIZPLHlEByt",
	"jAxyWNiJ28aeURxqD1SwQAaPH+fznHEgSezklSolUmbvXjW63I0Bxgh9TIgN8JC9IcTYOEAbDwsQMHkr",
	"Qtnki+sgyYHh6QL1sPGYIfgbdkebm6vdzrzdaYb2dUcjROPm6oVdxn4UajyKqqQhD6Ed3rdNZtBzqWIs",
	"alRTPy7Tj/4oyAG346SlWZOLWLTOWBWAbHjquwVuA3nI5maTfxScGUlYMKWh8ZuNtPpA0P3GLi6FhmTO",
	"pNIJuuzR6ZlG3yg0Br8xTePqp3Omo2wMIK59cNgL2CQZy6v4artxv39lhn1b+0+qml3ABjcZoOmSzPAu",
	"c/Skd8vQNvtg64Tf2Am/oXc23/14yTQ1A0shdGeMz4SrOvpkmzBFGDDGHP1VGyTpFvWCvs8ryHUsZT3w",
	"ydCrNQrT3qkYjBr0hCnzsLeZXwEWw5rXQorOJTB0t86C4Ukc5RlhOrgK3M+EHZABWpYsW3d8eAt14NgO",
	"DfhrGOrW4o8cRY1qYDsoEPjrsWQrCT7mYJc02DPtpW4ezm2yF2WM9RUSJFAI4VBM+ZIkfUIZ1sZ787to",
	"dQY0/x42P5u2OJ3R1Xh0O5c/RmsHcQet39XLG6UzxrKtC9iK4F2T5LQspbikeeICI0OsKcWlY01s7uMo",
	"96zq4u732evjN+8c+sb3zIFKGyrbOitsV342szIesZADAuJLHhhr1fvO1hALFr++RxYGU1ZLcNfLA1vO",
	"aDHHXFa8mkBZIIouuDKPH6ntDJW4mJ6d4pbYHpR1aK/xiG1krx3No5eU5d4V9dgOHH/h5Jp46rW1Qgjg",
	"1lHBILib3Km66Ul3XDoa7tqhk8KxtlyAL2yNB0UE7+ZVGRMSPVxk1YJuDAfZ4HRfOfGqSIz4JSpnaTxs",
	"wWfKMAe3MV/TmGDjAWPUQKzYwBECr1gAyzRTe5yWdZAMxogSE0NKW2g3E644V8XZ7xUQlgHX5pNEqewI",
	"qpFLX+Clv50a26E/lgNsi7004G9jYxhQQ9YFIrHdwAgjzJFcXe9w+onWoXHzQxAYvMZBVThib0vccsjk",
	"+MNxsz3tX7YjxWEtrb7+M4xh6y7sLuTlwxZLi+jAGNHCXIO7xfHwTmF6X2OPaLYERDfcDMa2bE+uRARM",
	"xVeU2zo7pp+loeutwMYMTK+VkHi1REH0lJ6pZC7FHxD3ZOdmoSKpn46UaC5i70kkZb+rROuoTFNBzdM3",
	"xGOQtYcsueAjaR8kDkg4cnkQOscb4D7ARblla1sTqHV8HReOMOVkauE3wuFw7qXp5HQ1o7Hr8cagMjgd",
	"N4c0rVCcFsR39qvgooYN7wXnPXVbZu9jlCCb/Oz+3b8bGkefF8tnkLKC5nErKUPqt2+fZWzBbGGlSkFQ",
	"uccBshXpLBe56kf2GKwhzcmcHIyD2mBuNTJ2yRSb5YAtntgWM6pw16rDrXUXMz3geqmw+dM9mi8rnknI",
	"9FJZwipBagMWXbk69j0DvQLg5ADbPXlBHmLUX7FLeGSo6GyR0dGTF5iWYv84iG12roLaNr2SoWL5306x",
	"xPkYjz0sDLNJOaiT6N0gW/ZyWIVtkSbbdR9ZwpZO6+2WpYJyuoD4aW6xAyfbF1cTg4YduvDM1mxTWooN",
	"YTo+Pmhq9NNAappRfxYNkoqiYLowAqQFUaIw/NSU5bGDenC2AJwrleHx8h/xiKW0bgN0Heb7DRDbvTw2",
	"azwIe0sLaJN1TKi9Qpez5pKyU4gTcuIv4mLtkLpkiKWNGctMHU06s4RYIoFxjU5UpefJlyRdUklTo/4m",
	"Q+gmsy8OI/VS2iUS+PUQv3e6S1AgL+OklwNs760J15c85IInhdEo2aMmFTSQymhJAqFpHk9q8Rq9m9O0",
	"HfS+BqiBkgyyW9ViNxpo6lsxHt8C8JasWM/nWvx47ZndO2dWMs4etDIr9NP7N87KKISMlWVoxN1ZHBK0",
	"ZHCJ+TXxRTIwb7kWMt9rFW6D/Z97ytJ4ALVZ5mU55gh8XbE8+7lJbe+UnJKUp8voGcfMdPylqZFXT9nK",
	"cbQKwJJyDnkUnN0zf/F7a2T3/03sO07B+J5tu6Wk7HQ7k2sQb6PpkfIDGvIynZsBQqq2c33r5LB8ITKC",
	"4zRXzhsu61fHCgrg/F6B0rF6vfjB5lViLMv4Bbb+CgGeoVU9Id/aGtdLIK0LqmjNsqLK7WVHyBYgXZC1",
	"KnNBszExcM5eH78hdlTbx9YitfVfFmjMtWfRiWEE9Sn2S3XyRebiaZj7w9meF2ZmrTReUFeaFmUsw960",
	"OPMNMI0/jOuimRdSZ0JeWQtbefvNDmL4Yc5kYSzTGprV8cgT5j9a03SJpmtLmwyz/P6FizxXqqAsaF1h",
	"sS4xgXJn8Ha1i2zpojERxr9YMWVLG8MltJP66xsuznXySf7t6cmKc8spUR297QbWTcjukbOH9z70G8Ws",
	"Q/hrGi5KVDKF69ZxOsVe0SvU3aJQvXqg9jZhXY/Pl6xPKRecpXiBOSimXKPsyiTvcy6yx13vbljKi7iT",
	"0IhwRUtR1elBjoqDxam8InSE6wdmg69mUS132D811uNdUk0WoJXTbJCNfREzFy9hXIErGYIVswM9KWTr",
	"rAk1ZPT4MqnD3NdkI0zxHTCAvzHf3jr3CNPyLhhHQ8iRzWUA2ogGVnHVxnpimiwEKDef9pVc9cH0meC1",
	"1AzWHye+6ivCsEc1Ztr2XLIP6tifUrpTQdP2pWlL8Fim+bmVTmwHPS5LN2j0Rm29wrGCaYMEjpw2JT7c",
	"HxC3hh9C28JuW9MLcD81jAaXeDgJJe7DPcaoa891SlNe0ryyHIUtiE3riV4DYzyCxhvGoalJHNkg0uiW",
	"gAuD8jrQT6WSamsC7qXTzoDmeCIZU2hKuxDtbUF1FhhJgnP0YwwvY1M2b0Bx1A0aw43yTV0K2XB3YEy8",
	"xBrsjpD9InhoVTkjKsPEzU5ZvJjiMIrbl6lsbwB9MejbRLa7ltRKznV2oqELL6mI2Zuv15BW9sBd2NIY",
	"tCxJijdIg/0iGtFkyjhPxSyPFcGpPwYVLDHJdrbBf2MFS4ZJ4k7Er52T5Y+/seO1DdY2pJ65aZgpUWxx",
	"w2Vu+t/pOudi0UbkfgMKW2U8ZJmYdL82anO4xuixV6z1FUVMQxK+vDE6TfXlmrZMoiKPOqVNpdrtTvlw",
	"zdkxqv6BZMT3ze17ancXe8YwlJKYDmbQUu3S4zUlzVX3vmDaQrExCDafwRaotY+9ROMrQzkMNoXBfO71",
	"3s8u6lmZCHsrQX1yTB+h733mHSkpcwdojcT2KetydPtZ0/tk7zUL3J2Ey3xFILGZvNtZMKzFIb3M5yD3",
	"3VYmioYV+uWqhsXIFihTdWXV+vWR4FTXWI3dqi8rd/8FE5RrB9jfhAHlf/O5/HYU+6pNUz8Qww0rKjPf",
	"Irp/+q05Gcgz6WZu2gRZFkd6Xo/MmkPafvJi5HImHsqnuVCML5Kh3I32uWgdVHygbPQXPRWsA4Z4zUG6",
	"uqHaPxqUaOEPdbfhsY0Urmb9TYigBmv3WOQGb1C9b66IYUUKap+McpHtcIJEQkENdjK4yDU85jZiv7Tf",
	"fbaer0jQqf8Rgev5Ndl5E8sfzzPVI2LI9XPixHZ3FuBNDBfGuS3LrGK3urghZejSllJkVWo1RSgY4A28",
	"vS8mblElUXMj7c+yt3PkeE33TZBTfQGbqdXe6ZLy5r50W6xtdWY7h+AGUGe179Smi++c+cJOYHEneP6Z",
	"Jtl4VAqRJwM+7En/clpXBi5YegEZMXuHP9gaKJhHHqLrVAcpV8uNr0dclsAhezQhxBh1Rak3Pl7Zrn3S",
	"GZw/0NvGX+OoWWXvizprcXLO42ey9hG2W+o3D2a7VrOvkt5yKAtk+0B6zQdUG11Fykfu+4BHJILYLenX",
	"MJXFImYL3fDSzl7y3bcYI6wfplvvMMQuWualvd3fiRoKCXdsZgbhkmuamf1E8n2nh/NArVYp6M9z7wVo",
	"0XaA9vsQvvGR+sQddm30bB/XJn5J2nRH38oSxF/j70vXvXlGrbc+3LixVf956KTInoYMHEp2aFqxPNu1",
	"uK0j5qZMFh6i/uIO4/+UQl2/2CTnvri5mkXXicl0FwEJE5lra/BgqODweI9zY9ct4s7hhpFWkukN3ofw",
	"XhH7JXrP9Fvg7m0S94BUnVXqkhrt24Uux2FRt26em/tW2CdgCrNfY5ROY73b12talDk4ufjqwewf8OzL",
	"w+zg2ZN/zL48eH6QwuHzFwcH9MUhffLi2RN4+uXzwwN4Mv/ixexp9vTw6ezw6eEXz1+kzw6fzA6/ePGP",
	"B/6tN4to847a/8Fqdsnxu5PkzCDb0ISWDOtEX6FJPBe+MhZNURKNX5GPjvxP/9NL2CQVRfA8tft15BJe",
	"RkutS3U0na5Wq0nYZbpAPyvRokqXUz9Ov7zwu5P6MN4mUeOK2nNWwwq4qI4VjvHb+9enZ+T43cmkYZjR",
	"0ehgcjB5ggUoS+C0ZKOj0TP8CaVnies+dcw2Ovp0NR5Nl0BzvXR/FKAlS/0ntaKLBciJKxFmfrp8OvVn",
	"edNPzse82vatnbntQgNBh6CWzPRTy1HPQrhYaWX6yWe1B5/sSxrTT+hrDf7eRuOTXrPsaupryboeriL9",
	"9FPzRMSVlY4cYqc8NmmCBi9KjI0vjO9xKfurEQifq8lU+0WRenVPMrOqptfL+rmM4Eru0Yf/0Ee6P3be",
	"LHx6cPAf9vra4TVnvNWebcXCI/X7vqYZ8XlEOPaT+xv7hOPNfaPQiFXYV+PR8/uc/Qk3LE9zgi2DDPv+",
	"0v/EL7hYcd/S7K5VUVC58WKsWkrBP4KDOpwuFHo3kl1SDaOP6D7HDtIGlAs+c3dt5YJv9/2lXO5LuXwe",
	"jxo+vaaAf/4z/kudfm7q9NSqu/3VqTPlbKrq1JYkbyy8Xim8BURzZjF7lW57J6arYb8F3Xv2ZnRLFfOn",
	"vYDzny0nhweH94dBGKV8KzT5Bg+TPlNp3U9wttlAHZ8oy3rsbRU/KP21yDZbKFSoRekSyyIWyYxxKmPP",
	"ZfXLdPcepLmADbEHrD6Q7l6Aa1tCV7eU/s/27Zy/dtk/UW6fHzy7v+FPQV6yFMgZFKWQVLJ8Q37idSr+",
	"zZ2oLItmrrTFradHjO2figwWwBOnJJKZyDa+5EQL4AXYAG3PLJh+ateNs8GmwSCQfda6rkTfR3q2IRjV",
	"bau2yGvY38Pm683Jq75/FvHAuihu9cO68j/g+tzo/e2/hP1z26T3ZtjYPh21l32oorv3jP09sNhNSaqj",
	"z1futKr/VBH5641P/8bnXy7CXy7CTbTPtxCRe1QQW/SO26Z9Ddt+Ydf2WdRQRNUdVJKHmPHNYfXIZY9a",
	"sBFvpb4YKDKb0eC1pi+qEGRZtjXXewc0FhTYGn41/savDnzCsl+xIA5eExkTIcmvNM+D3/DhEH/oNolH",
	"a5vCsfvrv3EMrTmAL8+Dt+/dM7TG+zCLaOloadDKJezfvmyeJ5sD1Gj/XgH6ZA5v+4pTGH90/Pbk4OAg",
	"dm27i7PLvrAYY5bdSiQ5XELeX+ohJDqVhnsU2zL8WfuprbBAdHhqHuE6fO98Bk3N6BhmCLVd9fg62L0S",
	"/IEmK8pczmuQF6eFq1ZDZjAXEtw27oqH1BHeGFJcJAZkDJemYtndbq6fw7uqV1u0mlpWOhMrPqy4sN4i",
	"zV3BIiwhVCcLaEE8gCahn/zobrDkG1JKcckyY+9pVoCxvWr1Yzr77MjO0/L18zYLxnEAlHIcxVbmokGG",
	"unvyva8ETx1mb63DFrPZOvzjcIzLfUzob8tL/WOCrWvlH5to/T01LJ/MhUww5yBBCvUTEjTQfOquFHd+",
	"tRf/gh/bL2RHfp3WxS6jH7tpFrGvLgvCN2rym8J8IVypOlPow0dDcKwf5BaxSX85mk4xd3splJ6OjMJp",
	"p8aEHz/WNP5Um+uO1lcfr/4rAAD//yzWzOqDoQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
