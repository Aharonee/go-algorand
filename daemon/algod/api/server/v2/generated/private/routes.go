// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by id
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info by id
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"rz9e//8AAAD//1XvcRFjowAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
