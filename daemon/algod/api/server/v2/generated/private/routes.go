// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
