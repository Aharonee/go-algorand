// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"uv6/AQAA//8p33Ri6LsAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
