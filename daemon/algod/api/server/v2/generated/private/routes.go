// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BqIAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
