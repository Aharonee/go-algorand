// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"h+v/CQAA//+hNPqj5Y4AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
