// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PctrLgX0HNuVV+7HBGfuUcqyp1V7GcRBvHcVnKubvX9iYYsmcGRyTAAKA0E6/+",
	"+xYaAAmS4Az1iHJT159sDfFoNBqNfuPzJBVFKThwrSaHnycllbQADRL/omkqKq4Tlpm/MlCpZKVmgk8O",
	"/TeitGR8NZlOmPm1pHo9mU44LaBpY/pPJxJ+q5iEbHKoZQXTiUrXUFAzsN6WpnU90iZZicQNcWSHODme",
	"XO34QLNMglJ9KH/i+ZYwnuZVBkRLyhVNzSdFLpleE71mirjOhHEiOBCxJHrdakyWDPJMzfwif6tAboNV",
	"usmHl3TVgJhIkUMfzleiWDAOHiqogao3hGhBMlhiozXVxMxgYPUNtSAKqEzXZCnkHlAtECG8wKticvhh",
	"ooBnIHG3UmAX+N+lBPgdEk3lCvTk0zS2uKUGmWhWRJZ24rAvQVW5VgTb4hpX7AI4Mb1m5MdKabIAQjl5",
	"/+0r8uzZs5dmIQXVGjJHZIOramYP12S7Tw4nGdXgP/dpjeYrISnPkrr9+29f4fynboFjW1GlIH5YjswX",
	"cnI8tADfMUJCjGtY4T60qN/0iByK5ucFLIWEkXtiG9/ppoTz/6m7klKdrkvBuI7sC8GvxH6O8rCg+y4e",
	"VgPQal8aTEkz6IeD5OWnz0+mTw6u/vbhKPlP9+eLZ1cjl/+qHncPBqIN00pK4Ok2WUmgeFrWlPfx8d7R",
	"g1qLKs/Iml7g5tMCWb3rS0xfyzovaF4ZOmGpFEf5SihCHRllsKRVromfmFQ8N2zKjOaonTBFSikuWAbZ",
	"1HDfyzVL1ySlyg6B7cgly3NDg5WCbIjW4qvbcZiuQpQYuG6ED1zQf11kNOvagwnYIDdI0lwoSLTYcz35",
	"G4fyjIQXSnNXqetdVuRsDQQnNx/sZYu444am83xLNO5rRqgilPiraUrYkmxFRS5xc3J2jv3dagzWCmKQ",
	"hpvTukfN4R1CXw8ZEeQthMiBckSeP3d9lPElW1USFLlcg167O0+CKgVXQMTiX5Bqs+3/6/Snt0RI8iMo",
	"RVfwjqbnBHgqsuE9dpPGbvB/KWE2vFCrkqbn8es6ZwWLgPwj3bCiKgivigVIs1/+ftCCSNCV5EMA2RH3",
	"0FlBN/1Jz2TFU9zcZtqWoGZIiakyp9sZOVmSgm6+Ppg6cBSheU5K4BnjK6I3fFBIM3PvBy+RouLZCBlG",
	"mw0Lbk1VQsqWDDJSj7IDEjfNPngYvx48jWQVgOMHGQSnnmUPOBw2EZoxR9d8ISVdQUAyM/Kz41z4VYtz",
	"4DWDI4stfiolXDBRqbrTAIw49W7xmgsNSSlhySI0durQYbiHbePYa+EEnFRwTRmHzHBeBFposJxoEKZg",
	"wt3KTP+KXlAFXz0fusCbryN3fym6u75zx0ftNjZK7JGM3IvmqzuwcbGp1X+E8hfOrdgqsT/3NpKtzsxV",
	"smQ5XjP/Mvvn0VApZAItRPiLR7EVp7qScPiRPzZ/kYScasozKjPzS2F/+rHKNTtlK/NTbn96I1YsPWWr",
	"AWTWsEa1KexW2H/MeHF2rDdRpeGNEOdVGS4obWmliy05OR7aZDvmdQnzqFZlQ63ibOM1jev20Jt6IweA",
	"HMRdSU3Dc9hKMNDSdIn/bJZIT3Qpfzf/lGVueutyGUOtoWN336JtwNkMjsoyZyk1SHzvPpuvhgmA1RJo",
	"02KOF+rh5wDEUooSpGZ2UFqWSS5SmidKU40j/ZuE5eRw8rd5Y1yZ2+5qHkz+xvQ6xU5GHrUyTkLL8hpj",
	"vDNyjdrBLAyDxk/IJizbQ4mIcbuJhpSYYcE5XFCuZ40+0uIH9QH+4GZq8G1FGYvvjn41iHBiGy5AWfHW",
	"NnygSIB6gmgliFaUNle5WNQ/PDwqywaD+P2oLC0+UDQEhlIXbJjS6hEunzYnKZzn5HhGvgvHRjlb8Hxr",
	"Lgcrapi7YeluLXeL1YYjt4ZmxAeK4HYKOTNb49FgZPi7oDjUGdYiN1LPXloxjb93bUMyM7+P6vzXILEQ",
	"t8PEhVqUw5xVYPCXQHN52KGcPuE4W86MHHX73oxszChxgrkRrezcTzvuDjzWKLyUtLQAui/2LmUcNTDb",
	"yMJ6S246ktFFYQ7OcEBrCNWNz9re8xCFBEmhA8M3uUjP7+C8L8w4/WOHw5M10Awkyaimwbly5yV+Z2PH",
	"77EfcgSQEcH+J/wPzYn5bAjf8EU7rFHYGdKvCMzrmdFzrfRsZzINUP8WpLCqLTEq6bWgfNVM3uMRFi1j",
	"eMRrq00T7OEXYZbe2MqOFkLejF46hMBJYwEk1IwaHJdpZ2exaVUmDj8RK4Jt0Bmocbr0hckQQ93hY7hq",
	"YeFU0z8AC8qMehdYaA9011gQRclyuIPzuqZq3V+EUeuePSWn3x+9ePL0l6cvvjJ6SSnFStKCLLYaFHno",
	"pGmi9DaHR/2VoTxb5To++lfPvd2oPW5sHCUqmUJBy/5Q1h5lLy3bjJh2fay10YyrrgEccyzPwLAXi3Zi",
	"Ta0GtGOmzJ1YLO5kM4YQljWzZMRBksFeYrru8ppptuES5VZWd6F8gJRCRiwieMS0SEWeXIBUTESM2+9c",
	"C+JaeIGk7P5uoSWXVBEzNxrrKp6BnMUoS284gsY0FGrfhWqHPtvwBjduQCol3fbQb9cbWZ2bd8y+tJHv",
	"bT+KlCATveEkg0W1asmuSykKQkmGHfHieMNWax3co++kEMs7Fzeis8SWhB/QwE5y08fddFY2QIDfigyM",
	"olSpO2DvzWAN9gzlhDijC1FpQgkXGaBWVak44x9wzaFPAF0ZOrxL9NoKFgswEnxKK7PaqiRoqO/RYtMx",
	"oamlogRRowYsmbUJ2ray01m3Ty6BZkayB07EwpkLnSETF0nRy6A963TXTkTXacFVSpGCUkYjs3L2XtB8",
	"O0uWegeeEHAEuJ6FKEGWVN4QWC00zfcAim1i4NZyorOx9qEeN/2uDexOHm4jlUYps1RghFJz4HLQMITC",
	"kTi5AIm2xj90//wkN92+qhyIBHCi1RkrULfjlAsFqeCZig6WU6WTfcfWNGrJf2YFwUmJnVQceMC+8IYq",
	"bS3OjGeoC1h2g/NYw4OZYhjgwSvQjPxPf/v1x04Nn+SqUvVVqKqyFFJDFlsDh82Oud7Cpp5LLIOx6/tW",
	"C1Ip2DfyEJaC8R2y7EosgqiuDTPOJdNfHJovzD2wjaKyBUSDiF2AnPpWAXZDb+gAIEZxrHsi4TDVoZza",
	"BTudKC3K0pw/nVS87jeEplPb+kj/3LTtExfVDV/PBJjZtYfJQX5pMWv94GtqhHYcmRT03NxNKIJb03gf",
	"ZnMYE8V4CskuyjfH8tS0Co/AnkM6oP24SJtgts7h6NBvlOgGiWDPLgwteEAVe0elZikrUZL4AbZ3Llh1",
	"J4iadEgGmjKjHgQfrJBVhv2J9XV0x7yZoDVKau6D3xObI8vJmcILow38OWzRtvvOOtHPAtf7HUiKkVHN",
	"6aacIKDeNWcu5LAJbGiq86255vQatuQSJBBVLQqmtY2KaAuSWpRJOEDUIrFjRmcTsg5ovwNjjFSnOFSw",
	"vP5WTCdWbNkN31lHcGmhwwlMpRD5CNt5DxlRCEbZ1kkpzK4zF4TjIzU8JbWAdEIMGgRr5vlAtdCMKyD/",
	"R1QkpRwFsEpDfSMIiWwWr18zg7nA6jmdFb3BEORQgJUr8cvjx92FP37s9pwpsoRLH7lmGnbR8fgxaknv",
	"hNKtw3UHKro5bicR3o6mGnNROBmuy1Nme20RbuQxO/muM3ht3zFnSilHuGb5t2YAnZO5GbP2kEbWVK33",
	"rx3HHWWFCYaOrRv3HV2If4wO3wwdg64/ceB4aT4O+V6MfJVv74BP24GIhFKCwlMV6iXKfhXLMLjRHTu1",
	"VRqKvmpvu/4yINi892JBT8oUPGcckkJw2Ebj+RmHH/FjrLc92QOdkccO9e2KTS34O2C15xlDhbfFL+52",
	"QMrvaqfjHWx+d9yOVScM60StFPKSUJLmDHVWwZWWVao/copScXCWI6Z+L+sP60mvfJO4YhbRm9xQHzlV",
	"Boe1rBw1Ty4hogV/C+DVJVWtVqB0Rz5YAnzkrhXjpOJM41yF2a/EblgJEu3tM9uyoFuypDmqdb+DFGRR",
	"6faNidFnShuty5qYzDRELD9yqkkORgP9kfGzDQ7ng7w8zXDQl0Ke11iYRc/DCjgoppK4S+I7+/V7qtZ+",
	"+aahZ5KuszWimPGbELWthlZ4+/99+O+HH46S/6TJ7wfJy/8x//T5+dWjx70fn159/fX/a//07OrrR//+",
	"b7Gd8rDHYqMc5CfHTpo8OUaRoTEu9WC/N4tDwXgSJbKzNZCCcQyx7dAWeWgEH09Ajxozldv1j1xvuCGk",
	"C5qzjOqbkUOXxfXOoj0dHappbURHgfRr/RRz6a5EUtL0HD16kxXT62oxS0Ux91L0fCVqiXqeUSgEx2/Z",
	"nJZsrkpI5xdP9lzpt+BXJMKuOkz2xgJB3x8Yj2dEk6ULUcSTt6y4JYpKOSMlhut4v4xYTuuYVZurdkgw",
	"oHFNvVPR/fn0xVeTaROIWH83mrr9+ilyJli2iYWbZrCJSWruqOERe6BISbcKdJwPIeyRiHOQ57lbWUeh",
	"IAUYSV+tWXn/rEdptoizzO8df3SK34afcBuHYQ4kWmm3zvgjlvcPt5YAGZR6HUtlaYke2KrZVICOZ6WU",
	"4gL4lLAZzLqKV7YC5X1iOdAlplSgpVGMie2qj4OlN08cAdbDhYzSbmL0g9KyY/9X04mTJtSdC/hu4Bhc",
	"3Tlrk6z/Wwvy4LvXZ2TuOLB6YAOg7dBByGrEoOGislo+N8PUbAKfjQD/yD/yY1gyzsz3w488o5rOF1Sx",
	"VM0rBfIbmlOewmwlyKEP9Dqmmn7kPdFtMMc2CLEjZbXIWUrOQxG7IU+bN9Uf4ePHD4bxf/z4qefA6QvE",
	"bqoom7ETJJdMr0WlE5cYkki4pDKLgK7qxAAc2aZ17Zp1StzYliO7xBM3fpz10bJU3QDh/vLLMjfLD8hQ",
	"ufBXs2VEaSG9cGMkHgsN7u9b4e4HSS99VlGlQJFfC1p+YFx/IsnH6uDgGZBWxOyvToYwNLktoWX6ulEA",
	"c9fshQu3ihJstKRJSVegosvXQEvcfRTACzSy5jnBbq1IXR/XgkM1C/D4GN4AC8e1ow5xcae2l8/wjS8B",
	"P+EWYhsjdTS+i5vuVxC7e+Pt6sT/9nap0uvEnO3oqpQhcb8zdeLfysha3qGk2IqbQ+ByJBdA0jWk55Bh",
	"uhYUpd5OW929z9JJrp51MGXTGm1wIebeoJVwAaQqM+pke8q33SQIBVr7zI/3cA7bM9Gk7lwn66EdhK+G",
	"DipSaiBkGmINj60bo7v5zv+Ngcdl6WPZMW7Tk8VhTRe+z/BBtpLvHRziGFG0gsSHEEFlBBGW+AdQcIOF",
	"mvFuRfqx5Rm1ZWFvvohM6nk/cU0abcz5sMPVYOy7/V4A5kiLS0UW1IjvwqX32kDzgItViq5gQFAODbUj",
	"w7lbxl0cZN+9F73pxLJ7ofXumyjItnFi1hylFDBfDKmgTtOJXPAzWV8ArmBGsGqHQ9giRzGpDpqwTIfK",
	"lsHcliEYAi1OwCB5I3B4MNoYCSWbNVU+8xgTtP1ZHiUD/IGJE7vS5U4Cp3uQhV0nw3me2z2nPSXTJc35",
	"TDmfHhdqmCNS3YyEj3Fgse0QHAWgDHJY2YXbxp5QmiSOZoMMHD8tlznjQJKY/54qJVJmU8eba8bNAUY+",
	"fkyItSmT0SPEyDgAG31cODB5K8KzyVfXAZK7JBTqx0bvWPA3xKMvbYSWEXlEaVg44wOxdZ4DUBf0Ud9f",
	"ndAjHIYwPiWGzV3Q3LA5p/E1g/SytlBs7eRoOS/royFxdodJ314s11qTvYpusppQZvJAxwW6HRDvFiVi",
	"W6AQX86kVeNq6C4dM/XA9T2Eq4dBvteNAOho+k1lJKf57dXQ2ndz/yZrWPq0yWP2waUx2h+in+guDeCv",
	"b4KoM7Teda/rqJLe9r62k9MC+SnGis0Z6bs8+o4VBTmgRJy0JIjkPOYIM4I9ILs99d0CzR1T4CjfPgpc",
	"+hJWTGloTNLmVvI+lvu2zVHMvBdiObw6XcqlWd97IWoebVM7ra0xXOa9r+BCaEiWTCqdoD0/ugTT6FuF",
	"GuW3pmlcUGgHDdgiNCyL8wac9hy2ScbyKk6vbt4fjs20b2sjjKoW57BFcRBouiYLLJoUDSXaMbWNNtu5",
	"4Dd2wW/ona133GkwTc3E0pBLe46/yLnocN5d7CBCgDHi6O/aIEp3MEi8+I8h17EssUBosIczMw1nu0yP",
	"vcOU+bH3BmFYKIbvKDtSdC2BtrxzFQxdJUbdYzqoOdTPfBg4A7QsWbbpGALtqIPqIr2Wtu+TuTtYwN11",
	"g+3BQGD0iwXXSlDtvP1GurXVo3i4ttkozJy1s+tDhhBOxZSvfdhHlCFtLNC1D1dnQPMfYPtP0xaXM7ma",
	"Tm5nN4zh2o24B9fv6u2N4hkd3daO1HIDXBPltCyluKB54qyrQ6QpxYUjTWzujbH3zOriNryz10dv3jnw",
	"r6aTNAcqk1pUGFwVtiv/MquyJQIGDoivrWYUHi+zW1Ey2Pw6dTu0yF6uwdWxCqTRXsGNxtoeHEVnoV3G",
	"42322ludY8AucYeDAMraP9DYrqx7oO0SoBeU5d5o5KEdiI3BxY2r2hLlCuEAt3YtBB6i5E7ZTe90x09H",
	"Q117eFI4145KW4UtJqeI4F3/sREh0RaFpFpQLJdhTQJ95sSrIjHHL1E5S+MGRr5Qhji4dRyZxgQbDwij",
	"ZsSKDfghecWCsUwzNULR7QAZzBFFpi+9MoS7hXBVgCvOfquAsAy4Np8knsrOQcX6JM7U3L9OjezQn8sN",
	"bM3TzfC3kTHCUjHdGw+B2C1ghG6qHrjHtcrsF1qbY8wPgT3+Gt7ucMbelbjDU+3ow1GzDQVct91NYdHe",
	"Pv8zhGELvO2vGOyVV1ezZmCOaAVgppKlFL9DXM9D9TgSee+L4zAM8fgd+CySwNRlMbV1pylk3Mw+uN1D",
	"0k1ohWp76AeoHnc+8ElhIRJvnqXcbrUtyNmK94oTTBijObfjNwTjYO7Fteb0ckFjVVqMkGFgOmq8ny1D",
	"shbEd/a4dzZv5uoVzUjgSK3bMpuTVoJskmL6+c83FBjstKNFhUYyQKoNZYKpdX7lSkSGqfgl5bauq+ln",
	"j5LrrcAav0yvSyExo1TFbd4ZpKygeVxyyBD77QzcjK2YrWpaKQjKZrqBbDloS0Wu9Kj1LzeoOVmSg2lQ",
	"mNftRsYumGKLHLDFE9tiQRVy8toQVXcxywOu1wqbPx3RfF3xTEKm18oiVglSC3Wo3tSemwXoSwBODrDd",
	"k5fkIfqsFLuARwaL7n6eHD55iUZX+8dB7AJw5Yt3cZMM2cl/OHYSp2N02tkxDON2o86i+ZG25vww49px",
	"mmzXMWcJWzpet/8sFZTTFcTDJIo9MNm+uJtoSOvghWe2YLLSUmwJ0/H5QVPDnwZiuQ37s2CQVBQF04Xz",
	"bChRGHpqamLaSf1wtvqyq9jk4fIf0UFYev9IR4m8X6Opvd9iq0Y37ltaQButU0JtGnHOGte9L7JGTnwx",
	"AixhVVeusrgxc5mlo5iDnvwlKSXjGhWLSi+Tf5B0TSVNDfubDYGbLL56Hinb1a7Uw68H+L3jXYICeRFH",
	"vRwgey9DuL7kIRc8KQxHyR41uRPBqRz0ZMajxTxH7wYL7h56rFBmRkkGya1qkRsNOPWtCI/vGPCWpFiv",
	"51r0eO2V3TtlVjJOHrQyO/Tz+zdOyiiEjJWmaY67kzgkaMngAgPX4ptkxrzlXsh81C7cBvo/1/PgRc5A",
	"LPNnOaYIfFOxPPtnkwvWqXwoKU/XUbv/wnT8pSlQXS/ZnuNoJZQ15Rzy6HD2zvzF362R2/9fYuw8BeMj",
	"23YrGtrldhbXAN4G0wPlJzToZTo3E4RYbSfH1FGX+UpkBOdpym40VNYv0hhULfutAqVjGQb4wUZ+oH3H",
	"6AW2aBYBnqFUPSPf2Qdm1kBaVQFQmmVFldsMc8hWIJ3hsSpzQbMpMeOcvT56Q+ysto8ts2qLdq1QmGuv",
	"oqPXBzV6xsUQ+oqp8fjm8ePsDrg0q1Yai3QoTYsylpJmWpz5Bpj3Fto6UcwLsTMjx1bCVl5+s5MYelgy",
	"WRjJtB7N8nikCfMfrWm6RtG1xU2GSX58tTlPlSqoyV/X1q3L7OC5M3C7gnO23tyUCKNfXDJl3xWBC2hn",
	"wdUpoU518llx7eXJinNLKVEevStl+SZo98BZh7Y3h0Yh6yD+moKLLdZ43eJ7p9grWreiW8mvV4zfpkDV",
	"ZWH9e1Ep5YKzFKtGBC+Z1CC7N0rG+ApGFNjoGqP8EXcnNHK4ovUD63Aih8XBioKeETrE9Y2VwVezqZY6",
	"7J8aH8NYU01WoJXjbJBNfRlMZy9hXIErm4TP1QR8UsiW/wU5ZNSll9Sm32uSEcbODwjA35pvb516hEGl",
	"54yjIOTQ5uJXrUUDn1DQRnpimqwEKLeedh6h+mD6zDCXLoPNp5l/cgHHsO4Ls2zrq+sPdeQ9d85TZtq+",
	"Mm1tAYXm51aYop30qCzdpMNFUqPygN7wQQRHPDCJN4EHyK3HD0fbQW47Xe54nxpCgwt02EGJ93CPMOqC",
	"oZ0KyRc0ryxFYQtiQ12iedOMR8B4wzg0D4JELog0eiXgxuB5HeinUkm1FQFH8bQzoDl66WIMTWlnor3t",
	"UJ0NRpTgGv0cw9vY1DodYBx1g0Zwo3xbv0NiqDsQJl7hA0gOkf3KpShVOSEqw7DjTi3TGOMwjNtXS25f",
	"AP1j0JeJbHctqT0517mJhjLJFlW2Ap3QLIvVm/sGvxL8SrIKJQfYQFrV9brKkqRYiaFdmqJPbW6iVHBV",
	"FTvm8g1uOV0qYnL0W5xA+bjqZvAZQfZrWO/x63fvX786Ont9bO8Lo5bbVDIjc0soDEM0eqzSYETnSgH5",
	"NUTjr9jv186C42AGNYwjRBvWUfaEiAH1iy3+G6upNUxAzqd+7agu70DHjtcW79sj9YRzc/QSxVbJeEzg",
	"1Xd7dDRT3+w8Nv3v9EDmYtUG5J7T3Hcx43CPYmz4tbnfwizwXqE4ewPWSdoYQyX8cwio3dbphW3miTdu",
	"r3Ic2u7ryva7rSfDNeqneEcPRFIGyf3UigHWGTQUT5kOhv9S7bJwNCU7OSUWlo+NYIMxbEF7+yRm1BA2",
	"FIBh4y/M517vcQJsTx3AsXci1Ef29AH6wYcNkpIy5+lsmEUfsy7AuB/yPSb0sNng7iJc2C4OEltJvFB4",
	"TOCydRKa2hp4DZRCsaa4ZayC+MiwkjMsAh6UC+mP5X26F5BqI9QHvioJcJ3iIWay4L2DL/U2BtSPOvrG",
	"ldnYVVujX8Z0D7PpZQAEWSy2BORsfCWJozoiAf2k+OLACrh7cqAd2zs6wnC5hFSziz0ZF/9htNQmmn/q",
	"9Vj7nk2QgMHqiDX/CO811esGoF0JETvhCcpQ3RqcoXjrc9g+UKRFDdGalFPP826SqIwYQO6QGBIRKubx",
	"s4Y354RhqqYMxIL3sNvu0JR8GSwGHuQP3XAuT5KEhjlFO6a8EDHNfdRcpuu1Mu0w+GooKaNfjndYEDrG",
	"6seqfsihfmU30GrISb8q1KVLlMb8mNrW7FOmQfnffDKcncW+3tyUK0fL/iWVmW8RVVW9FpzsuI96mRS+",
	"lGwX6GU9M2viofqx85ECIxj1luZCMb5KhkIH2yFI4ctv6GjF6wDrHCNcS5DumQLtH8dOtPDxU7vg2IUK",
	"90rZTZCgBmt7WeAGU+3fN7UEsFoitU+jOydyuECjt1IDnQwy/ofn3IXsV/a7Dxb31fJGaOSOXpO9Kfs+",
	"Eo6pHhJDql8Sd1vuD0K/idbLOLfP1qhY+j83qAytx6UUWZXaCzo8GI2NYWxxjR2sJKowpv1V9mT/HEvN",
	"vAlSes5hO7fyd7qmvKn50z7WVoSyawhSaDu7facGgbjuk6/sAlZ3AuefqVRPJ6UQeTJgLj7pVzHonoFz",
	"lp5DRszd4WNIBgqCk4dopaz9gZfrrc/aL0vgkD2aEWLU8qLUW+8abNfl7EzOH+hd829w1qyyhUWcvj/7",
	"yOPhT1jyQ96Sv/lhdnM1BYb53XIqO8ieMgGbgQoKkl5GyuOPfbIx4qzrlixviMpCEZNSbpgzOup893X+",
	"COkHNbt3az9hSrnP+kyFtKYjlJa8QacrvPw49NZhqNW6zvev1+5CQAhgUKHc87s/CeYOnf1Yoz1YSozW",
	"wsSuPZt93rIF2WJkHV+skHDHNqHACXVNm1A/ZW3s8nAduKGVgv46R5+1Fm4jx6xZ21iDZh+5w3ZIvRhj",
	"h4wXTjLd0RBqEYJVxwiCSn598iuRsMTqwoI8fowTPH48dU1/fdr+bBTtx4+jTPjeTKCtR0DdvDGK+edQ",
	"7I6NTxkIE+vsR8XybB9htIL+mkrfGNb2iwuP/FNqjf9irSH9o+rKs17H+dLdBERMZK2tyYOpgnC+EZF8",
	"rtss+kyrgrSSTG8xa9Mrz+yXaDWM72p7m7PX1nk+Ls1Ei3Oo834b61ylfA3G74R91rUwNyK6vjQ++/J6",
	"Q4syB3dQvn6w+Ds8+8fz7ODZk78v/nHw4iCF5y9eHhzQl8/pk5fPnsDTf7x4fgBPll+9XDzNnj5/unj+",
	"9PlXL16mz54/WTz/6uXfHxg+ZEC2gE58jsDkf2NB/uTo3UlyZoBtcEJLVr/2ZMjYFwGmKZ5Eo37mk0P/",
	"0//0J2yWiqIZ3v86cSHIk7XWpTqczy8vL2dhl/kK1fFEiypdz/08/Vd23p3U4ZE2rQ131Ea+GVLATXWk",
	"cITf3r8+PSNH705mDcFMDicHs4PZE3xDowROSzY5nDzDn/D0rHHf547YJoefr6aT+RpojtZr80cBWrLU",
	"f1KXdLUCOXPVkM1PF0/nPrpq/tmZIq52fZuHhcXmn1sWm2xPT6y9NP/sUwp3t27l7DlLVdBhJBTDU9p3",
	"JOefUfUf/H2O7g5LjnNvYYy3bAH8WW9YdtXt4V5um39unlK8suc1h5g90QbW0uDlxSlh7g1yZX81R9Tn",
	"8zDVfnmzpreTzNCZ6fWqflYyKGVy+KEnk9uBiB8JD6WhuObMtGZq2KKWFYTVNWqm32rfsP4PB8nLT5+f",
	"TJ8cXP3NsHb354tnVyMdA81T5+S05tsjG37CZBg0ceBRenpw8N/sofjn11zxTkWs5YaPFE//hmbEx5rj",
	"3E/ub+4Tjm4Zw2KJvUKuppMX97n6E25InuYEWwZZmP2t/5mfc3HJfUtz31dFQeXWH2PVYgr+sVi8VehK",
	"oVou2QXVMPmEdp9YUNIAc8EX+a/NXE5Nry/M5b6YC27SXTCX9kB3zFyeXvOA//VX/IWd/tXY6alld+PZ",
	"qRPlbDrT3L7z1kh4vWLfK4jmVWGGE931gGuXw34Huvce7eSWLOZPe5r2v/c5eX7w/P4gaFeq/QG25K3Q",
	"5Fv0hf5Fz+y447NLEupoRlnWI3LL/kHpb0S23YGhQq1Kl4IQkUsWjBuQ+7dL/wW03nux57AlNj7A+4Hc",
	"e+lteejqljzgL/u07Rce8oWHSDv9s/ub/hTkBUuBnEFRCkkly7fkZ14nkN5crcuyaOxl++j3eJrRRlKR",
	"wQp44hhWshDZ1hcPaw14DtaI3RNU5p/bFYCtoWzQLHWMv9cPk/WBXmzJyXFPgrHdupz2my027WiMEZ2w",
	"C+JOzbDLiwaUsV1kbhayEppYLGRuUV8YzxfGcyvhZfThickvUW3CG3K6d/LUV1KI1Rqhuj/1GJ3jTz2u",
	"d7LRfX0mpr/YGFXISPDBJlN00fyFJXxhCbdjCd9B5DDiqXVMIkJ0N7H09hkEhuNl3Xc0MNDBN69yKomC",
	"sWaKIxzRGSfug0vct5IWxZXV0SgnsGEK34WKbNjd6m1fWNwXFvcX8lrtZzRtQeTams45bAta1vqNWlc6",
	"E5e2AlmUK2Jxbpq7Sp6Yr1jHbGhB/ABN1hv5yWUM51tM7mOZEeM0K8CIVDWvM519LHMTTG1GaB5UXTGO",
	"EyCrwFlsyVoa5JMoSAW3zw92fG0OsrdWJ4wx2d8qQI7mcONgnExbzha3jZECsbeWv/q+kasdtnSkCiSK",
	"SDxG/cBg6+/5JWU6WQrpcs0Qff3OGmg+d4V4Or82SeW9L5gpH/wYBHbEf53XBdWjH7vBK7GvLmLEN2qi",
	"08JoL9zgOs7rwyezT1iP0+19E7x0OJ9jgsZaKD2fXE0/dwKbwo+f6q35XF/LbouuPl39/wAAAP//WUmM",
	"GFC4AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
