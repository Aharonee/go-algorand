// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
