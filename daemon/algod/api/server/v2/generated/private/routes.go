// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by id
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info by id
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
