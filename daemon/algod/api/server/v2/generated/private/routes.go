// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by id
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info by id
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
