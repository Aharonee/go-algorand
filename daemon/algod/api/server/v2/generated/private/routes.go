// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
