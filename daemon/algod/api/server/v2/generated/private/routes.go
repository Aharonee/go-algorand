// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
