// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a Merkle proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"format":  true,
		"exclude": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------
	if paramValue := ctx.QueryParam("exclude"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":   true,
		"hashtype": true,
		"format":   true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------
	if paramValue := ctx.QueryParam("hashtype"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":    true,
		"sourcemap": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------
	if paramValue := ctx.QueryParam("sourcemap"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET("/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET("/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET("/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.GET("/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET("/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET("/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET("/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET("/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET("/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET("/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET("/v2/status", wrapper.GetStatus, m...)
	router.GET("/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST("/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST("/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST("/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.POST("/v2/transactions", wrapper.RawTransaction, m...)
	router.GET("/v2/transactions/params", wrapper.TransactionParams, m...)
	router.GET("/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET("/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9aXPctrLoX8Gbe6u83OFI3nKPVZW6T7GdRO/YjsvSOXeJ/GIM2TODIxLgAUBpJn7+",
<<<<<<< HEAD
	"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",
	"4ir/yiwoAQA=",
=======
	"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",
	"yizRWvkrAQA=",
>>>>>>> 0eb105b04 (changed message in state proof to a new generated type)
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
