// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get a Merkle proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetProof(ctx echo.Context, round uint64, txid string, params GetProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProofParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET("/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.GET("/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET("/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET("/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET("/v2/blocks/:round/transactions/:txid/proof", wrapper.GetProof, m...)
	router.GET("/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET("/v2/status", wrapper.GetStatus, m...)
	router.GET("/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST("/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST("/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.POST("/v2/transactions", wrapper.RawTransaction, m...)
	router.GET("/v2/transactions/params", wrapper.TransactionParams, m...)
	router.GET("/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET("/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
